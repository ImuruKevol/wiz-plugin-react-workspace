{"route":"segment = framework.match(\"routes/<view>/<path:path>\")\nif segment is not None:\n    if segment.view is None:\n        framework.response.redirect(\"routes/list\")\n    framework.layout('core.theme.layout', navbar=True, monaco=False)\n    framework.render(\"routes/list\", \"react.workspace.routes.list\")\n\n    framework.layout('core.theme.layout', navbar=False, monaco=True)\n    framework.render(\"routes/editor/<app_id>\", \"react.workspace.routes.editor\")\n\nsegment = framework.match(\"apps/<view>/<component>\")\nif segment is not None:\n    if segment.view is None:\n        framework.response.redirect(\"apps/list\")\n    \n    framework.layout('core.theme.layout', navbar=True, monaco=False)\n    framework.render(\"apps/list\", \"react.workspace.apps.list\")\n\n    framework.layout('core.theme.layout', navbar=False, monaco=True)\n    framework.render(\"apps/editor/<component>\", \"react.workspace.apps.editor\")\n\n    if segment.view == 'new':\n        wiz = framework.model('wiz').instance()\n        data = wiz.model(\"react/storage\").use(\"src\")\n        component = segment.component\n        info = data.__template__(component)\n        data.app.update(info)\n        framework.response.redirect(f\"apps/editor/{component}\")\n\n    if segment.view == 'preview':\n        component = segment.component\n        framework.request.segment = season.stdClass()\n        framework.layout('core.theme.layout', navbar=False, monaco=False)\n        framework.render(\"apps/preview/<component>\", \"react.workspace.apps.preview\")\n\nframework.layout('core.theme.layout', navbar=True, monaco=True)\nframework.render(\"res\", \"react.workspace.resources\")\nframework.render(\"ctrls\", \"react.workspace.controllers\")\nframework.render(\"models\", \"react.workspace.models\")\nframework.render(\"config\", \"react.workspace.config\")\nframework.render(\"themes\", \"react.workspace.themes\")\n\nframework.layout('core.theme.layout', navbar=False, monaco=False)\nframework.render(\"logger/<branch>\", \"react.workspace.logger\")\n\nframework.response.redirect(\"/wiz/admin/react.workspace/routes/list\")","builder":"framework.nav(\"react.workspace\", \"React\", \"/wiz/admin/react.workspace\", r'^/wiz/admin/react.workspace')\nframework.subnav(\"react.workspace\", \"route\", \"Route\", \"/wiz/admin/react.workspace/routes\", r'^/wiz/admin/react.workspace/routes')\nframework.subnav(\"react.workspace\", \"app\", \"App\", \"/wiz/admin/react.workspace/apps\", r'^/wiz/admin/react.workspace/apps')\nframework.subnav(\"react.workspace\", \"controller\", \"Controller\", \"/wiz/admin/react.workspace/ctrls\", r'^/wiz/admin/react.workspace/ctrls')\nframework.subnav(\"react.workspace\", \"model\", \"Model\", \"/wiz/admin/react.workspace/models\", r'^/wiz/admin/react.workspace/models')\nframework.subnav(\"react.workspace\", \"theme\", \"Theme\", \"/wiz/admin/react.workspace/themes\", r'^/wiz/admin/react.workspace/themes')\nframework.subnav(\"react.workspace\", \"resource\", \"Resource\", \"/wiz/admin/react.workspace/res\", r'^/wiz/admin/react.workspace/res')\nframework.subnav(\"react.workspace\", \"config\", \"Config\", \"/wiz/admin/react.workspace/config\", r'^/wiz/admin/react.workspace/config')"}